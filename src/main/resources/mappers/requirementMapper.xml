<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.modernhome.mapper.RequirementMapper">

    <resultMap type="ReqJoinVO" id="reqjoinRM">
    
    	<result property="req_id" column="req_id" />
        <result property="req_num" column="req_num" />
        <result property="pro_id" column="pro_id" />
        <result property="ma_id" column="ma_id" />
        <result property="req_cnt" column="req_cnt" />
        <result property="req_unit" column="req_unit" />
        <result property="req_reg_date" column="req_reg_date" />
        <result property="emp_id" column="emp_id" />
        <result property="req_update_date" column="req_update_date" />
        <result property="update_emp_id" column="update_emp_id" />
     	<result property="pro_name" column="pro_name" />
        <result property="pro_num" column="pro_num" />
        <result property="ma_name" column="ma_name" />
        <result property="ma_num" column="ma_num" />
        <result property="emp_name" column="emp_name" />
        
    </resultMap>

	<!-- 소요량 목록 (페이징) -->
    <select id="getRequirements" resultMap="reqjoinRM">
        SELECT req_id, req_num, p.pro_id, p.pro_num, p.pro_name, m.ma_num, m.ma_name,
       			r.req_cnt, r.req_unit, r.req_reg_date, r.emp_id, r.req_update_date, r.update_emp_id,
        CASE
        	WHEN r.update_emp_id IS NULL THEN
               (SELECT emp_name FROM employee WHERE emp_id = r.emp_id)
           ELSE
               (SELECT emp_name FROM employee WHERE emp_id = r.update_emp_id)
        END AS emp_name
		FROM requirement r
		JOIN product p ON r.pro_id = p.pro_id
		JOIN material m ON r.ma_id = m.ma_id
		ORDER BY p.pro_id
        LIMIT #{startPage}, #{pageSize}
    </select>
    <!-- 소요량 목록 (페이징) -->
    
    <!-- 전체 글 수 계산 (페이징) -->
	 <select id="reqTotalCnt" resultType="int">
	 	SELECT count(req_id) 
		FROM requirement r
		JOIN product p ON r.pro_id = p.pro_id
		JOIN material m ON r.ma_id = m.ma_id
	 </select>
    <!-- 전체 글 수 계산 (페이징) -->
    
    <!-- 소요량 검색 (페이징) -->
    <select id="reqSearch" resultMap="reqjoinRM" parameterType="java.util.Map">
        SELECT req_id, req_num, p.pro_id, p.pro_num, p.pro_name, m.ma_num, m.ma_name,
       			r.req_cnt, r.req_unit, r.req_reg_date, r.emp_id, r.req_update_date, r.update_emp_id,
        CASE
        	WHEN r.update_emp_id IS NULL THEN
               (SELECT emp_name FROM employee WHERE emp_id = r.emp_id)
           ELSE
               (SELECT emp_name FROM employee WHERE emp_id = r.update_emp_id)
        END AS emp_name
		FROM requirement r
		JOIN product p ON r.pro_id = p.pro_id
		JOIN material m ON r.ma_id = m.ma_id
		where
        <choose>
			<when test="option == 'pro_name'">
				pro_name like CONCAT('%', #{search}, '%')
			</when>
			
			<when test="option == 'ma_name'">
				ma_name like CONCAT('%', #{search}, '%')
			</when>
			
			<otherwise>
				pro_name like CONCAT('%', #{search}, '%')
				OR ma_name like CONCAT('%', #{search}, '%')
			</otherwise>
		</choose>
		ORDER BY p.pro_id
		LIMIT #{pageVO.startPage}, #{pageVO.pageSize}
    </select>
    <!-- 소요량 검색 (페이징) -->
    
    <!-- 검색 결과 개수 (페이징) -->
    <select id="reqSearchCnt" resultType="int" parameterType="java.util.Map">
    	SELECT count(req_id) 
		FROM requirement r
		JOIN product p ON r.pro_id = p.pro_id
		JOIN material m ON r.ma_id = m.ma_id
		where
        <choose>
			<when test="option == 'pro_name'">
				pro_name like CONCAT('%', #{search}, '%')
			</when>
			
			<when test="option == 'ma_name'">
				ma_name like CONCAT('%', #{search}, '%')
			</when>
			
			<otherwise>
				pro_name like CONCAT('%', #{search}, '%')
				OR ma_name like CONCAT('%', #{search}, '%')
			</otherwise>
		</choose>
    </select>
    <!-- 검색 결과 개수 (페이징) -->
    
    <!-- 소요량 등록 -->
	<insert id="regRequirement">
	
	    <selectKey keyProperty="req_num" resultType="String" order="BEFORE">
	        <![CDATA[
	        SELECT COALESCE((SELECT CONCAT('REQ', #{pro_id}, '-001') FROM requirement WHERE pro_id = #{pro_id} LIMIT 1), CONCAT('REQ', #{pro_id}, '-001')) AS req_num
	        FROM dual
	        ]]>
    	</selectKey>
    
	    INSERT INTO requirement (req_num, pro_id, ma_id, req_cnt, req_unit, req_reg_date, emp_id)
	    SELECT
	        CASE
	            WHEN #{req_num} IS NULL THEN CONCAT('REQ', #{pro_id}, '-001')
	            ELSE
	                CONCAT('REQ', #{pro_id},
	                    (SELECT CONCAT('-', LPAD(COUNT(*) + 1, 3, '0'))
	                    FROM requirement
	                    WHERE req_num LIKE CONCAT('REQ', #{pro_id}, '-%')))
	        END,
	        #{pro_id},
	        #{ma_id},
	        #{req_cnt},
	        #{req_unit},
	        NOW(),
	        #{emp_id}
	    FROM dual;
	    
	</insert>
    <!-- 소요량 등록 -->
    
    <!-- 소요량 수정 -->
	<update id="updateReq">
		update requirement
		set req_cnt = #{req_cnt}, req_update_date = now(), update_emp_id = #{update_emp_id}
		where req_num = #{req_num}
	</update>
    <!-- 소요량 수정 -->
    
	<!-- 소요량 삭제 -->
	<delete id="delRequirement">
		delete from requirement
		where req_id = #{req_num}
	</delete>
	<!-- 소요량 삭제 -->
	
	<!-- 완제품 id에 따른 소요량 조회 -->
	<select id="getBOMList" resultMap="reqjoinRM">
		SELECT pro_num, pro_name, ma_num, ma_name, req_cnt, req_unit
		FROM requirement r
		JOIN product p ON p.pro_id = r.pro_id
		JOIN material m ON m.ma_id = r.ma_id
		WHERE p.pro_num = #{pro_num};
	</select>
	<!-- 완제품 id에 따른 소요량 조회 -->
	
    
    
    
    	
	
</mapper>