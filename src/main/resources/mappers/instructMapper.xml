<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.modernhome.mapper.WorkInstrMapper">
	
	<!-- Join 결과 매핑 RM은 resultMap -->
	<resultMap id="wijoinRM" type="WijoinVO">
		<result property="work_id" column="work_id"/>
		<result property="pro_id" column="pro_id"/>
		<result property="req_id" column="req_id"/>
		<result property="clt_id" column="clt_id"/>
		<result property="oo_id" column="oo_id"/>
		<result property="line_id" column="line_id"/>
		<result property="emp_id" column="emp_id"/>
		<result property="work_num" column="work_num"/>
		<result property="pro_num" column="pro_num"/>
		<result property="ma_num" column="ma_num"/>
		<result property="oo_num" column="oo_num"/>
		<result property="line_num" column="line_num"/>
		<result property="clt_name" column="clt_name"/>
		<result property="pro_name" column="pro_name"/>
		<result property="pro_unit" column="pro_unit"/>
		<result property="emp_name" column="emp_name"/>
		<result property="line_name" column="line_name"/>
		<result property="ma_num" column="ma_num"/>
		<result property="ma_name" column="ma_name"/>
		<result property="oo_cnt" column="oo_cnt"/>
		<result property="req_cnt" column="req_cnt"/>
		<result property="work_cnt" column="work_cnt"/>
		<result property="work_state" column="work_state"/>
		<result property="reg_date" column="reg_date"/>
		<result property="update_id" column="update_id"/>
		<result property="update_date" column="update_date"/>
		<result property="oo_end_date" column="oo_end_date"/>
		<result property="qc_id" column="qc_id"/>
		<result property="qc_num" column="qc_num"/>
	</resultMap>
	<!-- Join 결과 매핑 -->
	
	
	<!-- 전체 글 수 계산 (페이징 처리) -->
	<select id="wiTotalCnt" resultType="int">
		SELECT count(*) FROM work_instr
	</select>
	<!-- 전체 글 수 계산 (페이징 처리) -->
	
	
	<!-- 작업지시 목록 조회 (페이징 처리) -->
	<select id="getList" resultMap="wijoinRM">
		SELECT wi.work_id, wi.pro_id, wi.oo_id, work_num, wi.line_id, line_num, pro_num, pro_name, wi.work_state, oo_cnt, 
			wi.reg_date, wi.update_date, wi.work_cnt, oo_num, oo_end_date, wi.emp_id, wi.update_emp_id, 
			CASE 
			WHEN wi.update_emp_id IS NULL THEN
			(SELECT emp_name FROM employee WHERE emp_id = wi.emp_id)
			ELSE
			(SELECT emp_name FROM employee WHERE emp_id = wi.update_emp_id)
        	END AS emp_name 
		FROM work_instr wi 
		LEFT JOIN out_order oo ON wi.oo_id = oo.oo_id 
		LEFT JOIN client clt ON oo.clt_id = clt.clt_id 
		LEFT JOIN line li ON wi.line_id = li.line_id  
		LEFT JOIN product pro ON wi.pro_id = pro.pro_id
		LEFT JOIN material_release mr ON wi.work_id = mr.work_id
		ORDER BY wi.work_id LIMIT #{pageVO.startPage}, #{pageVO.pageSize}
	</select>
	<!-- 작업지시 목록 조회 (페이징 처리) -->
	
	
	<!-- 작업지시서 조회 -->
	<select id="getInstr" resultMap="wijoinRM">
		SELECT wi.work_id, wi.pro_id, work_num, oo_num, pro_num, pro_name, work_cnt, work_state, oo_cnt, pro_unit, oo_end_date, 
			clt_name, wi.line_id, line_num, wi.reg_date, wi.update_date 
		FROM work_instr wi 
		LEFT JOIN out_order oo ON wi.oo_id = oo.oo_id 
		LEFT JOIN client clt ON oo.clt_id = clt.clt_id 
		LEFT JOIN line li ON wi.line_id = li.line_id  
		LEFT JOIN product pro ON wi.pro_id = pro.pro_id 
		WHERE wi.work_id = #{work_id}
	</select>
	<!-- 작업지시서 조회 -->
	
	
	<!-- 작업지시서 자재 출력 -->
	<select id="getInstrReq" resultMap="wijoinRM">
		SELECT wi.work_id, wi.pro_id, ma_num, ma_name, req_cnt, work_cnt 
		FROM  work_instr wi 
		LEFT JOIN requirement req ON wi.pro_id = req.pro_id 
		LEFT JOIN material ma ON ma.ma_id = req.ma_id 
		WHERE wi.work_id = #{work_id}
	</select>
	<!-- 작업지시서 자재 출력 -->
	
	
	<!-- 검색한 작업지시 개수 (페이징 처리) -->
	<select id="wiSearchCnt" resultType="int">
		SELECT count(wi.work_id) 
		FROM work_instr wi 
		LEFT JOIN out_order oo ON wi.oo_id = oo.oo_id 
		LEFT JOIN client clt ON oo.clt_id = clt.clt_id 
		LEFT JOIN line l ON wi.line_id = l.line_id  
		LEFT JOIN product pro ON wi.pro_id = pro.pro_id 
		LEFT JOIN employee emp ON wi.emp_id = emp.emp_id 
		<where>
			<if test="work_state != ''">
				work_state = #{work_state}
			</if>
			<if test="pro_num != ''">
				AND pro_num like CONCAT('%', #{pro_num}, '%')
			</if>
			<if test="startDate != ''">
	        	AND wi.reg_date &gt;= #{startDate}
	        </if>
	        <if test="endDate != ''">
	        	AND #{endDate} &gt;= DATE(wi.reg_date)
	        </if>
		</where>
	</select>
	<!-- 검색한 작업지시 개수 (페이징 처리) -->
	
	
	<!-- 작업지시 검색 (페이징 처리) -->
	<select id="wiListSearch" resultMap="wijoinRM">
		SELECT wi.work_id, wi.pro_id, wi.oo_id, work_num, wi.line_id, line_num, pro_num, pro_name, wi.work_state, oo_cnt, 
			wi.reg_date, wi.update_date, wi.work_cnt, oo_num, oo_end_date, wi.emp_id, wi.update_emp_id, 
			CASE 
			WHEN wi.update_emp_id IS NULL THEN
			(SELECT emp_name FROM employee WHERE emp_id = wi.emp_id)
			ELSE
			(SELECT emp_name FROM employee WHERE emp_id = wi.update_emp_id)
        	END AS emp_name  
		FROM work_instr wi 
		LEFT JOIN out_order oo ON wi.oo_id = oo.oo_id 
		LEFT JOIN client clt ON oo.clt_id = clt.clt_id 
		LEFT JOIN line l ON wi.line_id = l.line_id  
		LEFT JOIN product pro ON wi.pro_id = pro.pro_id 
		LEFT JOIN employee emp ON wi.emp_id = emp.emp_id 
		<where>
			<if test="work_state != ''">
				work_state = #{work_state}
			</if>
			<if test="pro_num != ''">
				AND pro_num like CONCAT('%', #{pro_num}, '%')
			</if>
			<if test="startDate != ''">
	        	AND wi.reg_date &gt;= #{startDate}
	        </if>
	        <if test="endDate != ''">
	        	AND #{endDate} &gt;= DATE(wi.reg_date)
	        </if>
		</where>
		ORDER BY wi.work_id LIMIT #{pageVO.startPage}, #{pageVO.pageSize}
	</select>
	<!-- 작업지시 검색 (페이징 처리) -->
	
	
	<!-- 작업지시서를 작성하지 않은 수주 번호 출력 -->
	<select id="getBeforeInstr" resultMap="wijoinRM">
		SELECT oo.oo_id, oo_num, clt_name, pro_num, pro_name, oo_cnt, oo_end_date FROM work_instr wi 
		RIGHT JOIN out_order oo ON wi.oo_id = oo.oo_id 
		JOIN product pro ON oo.pro_id = pro.pro_id 
		JOIN client clt ON oo.clt_id = clt.clt_id 
		WHERE wi.work_id IS NULL
	</select>
	<!-- 작업지시서를 작성하지 않은 수주 번호 출력 -->
	
	
	<!-- 작업지시서를 작성하지 않은 수주번호와 관련된 작업지시서 내용 출력 -->
	<select id="getBeforeInstrReq" resultMap="wijoinRM">
		SELECT oo.pro_id, oo.oo_id, oo_num, oo.clt_id, req.req_id, pro_num, pro_name, pro_unit, ma_num, ma_name, clt_name, req_cnt, oo_cnt, oo_end_date, li.line_id 
		FROM work_instr wi
		RIGHT JOIN out_order oo ON wi.oo_id = oo.oo_id 
		LEFT JOIN requirement req ON oo.pro_id = req.pro_id 
		LEFT JOIN product pro ON req.pro_id = pro.pro_id 
		LEFT JOIN material ma ON req.ma_id = ma.ma_id 
		LEFT JOIN client clt ON oo.clt_id = clt.clt_id 
		LEFT JOIN line li ON li.line_id = wi.line_id
		WHERE oo.oo_id = #{oo_id}
	</select>
	<!-- 작업지시서를 작성하지 않은 수주번호와 관련된 작업지시서 내용 출력 -->
	
	
	<!-- 작업지시 id, 번호 자동 생성 -->
	<select id="createIdNum" resultMap="wijoinRM">
		SELECT ifnull(max(work_id), 0) + 1 AS work_id, concat('WI', lpad((SELECT ifnull(max(work_id), 0) FROM work_instr) + 1, 4, 0)) AS work_num 
		FROM work_instr
	</select>
	<!-- 작업지시 id, 번호 자동 생성 -->
	
	
	<!-- 작업지시서 추가 -->
	<insert id="addInstr" parameterType="WijoinVO">
		INSERT INTO work_instr (work_id, work_num, line_id, pro_id, req_id, oo_id, work_cnt, work_state, emp_id) 
		VALUES (#{work_id}, #{work_num}, #{line_id}, #{pro_id}, 
				#{req_id}, #{oo_id}, #{work_cnt}, '대기', #{emp_id}) 
	</insert>
	<!-- 작업지시서 추가 -->
	
	
	<!-- 작업지시서 수정 -->
	<update id="modifyInstr" parameterType="WijoinVO">
		UPDATE work_instr SET work_cnt = #{work_cnt}, line_id = #{line_id}, work_state = #{work_state}, 
			update_emp_id = #{emp_id}, update_date = now() 
		WHERE work_id = #{work_id}
	</update>
	<!-- 작업지시서 수정 -->
	
	
	<!-- 자재 출고 테이블에서 해당 작업지시 코드와 일치하고, 소요량에 맞는 자재 id 전부가 '출고완료'라면 자동으로 작업지시 상태가 '진행중' 변경 -->
	<update id="modifyInstrMrState" parameterType="WijoinVO">
		<selectKey keyProperty="work_state" resultType="WijoinVO" order="BEFORE">
			SELECT IF((SELECT count(work_id) FROM material_release WHERE work_id = #{work_id}) = 
				(SELECT count(mr_state) FROM material_release WHERE work_id = #{work_id} AND mr_state = '출고완료'), '진행중', '대기') AS work_state
		</selectKey>
		UPDATE work_instr SET work_state = #{work_state} WHERE work_id = #{work_id}
	</update>
	<!-- 자재 출고 테이블에서 해당 작업지시 코드와 일치하고, 소요량에 맞는 자재 id 전부가 '출고완료'라면 자동으로 작업지시 상태가 '진행중' 변경 -->
	
	
	<!-- 작업지시 상태가 진행중 또는 완료일 때 수주 테이블의 상태를 자동으로 '생산중'으로 변경 -->
	<update id="modifyOoInstrState">
		UPDATE out_order SET oo_state = (
			SELECT IF((SELECT oo_id FROM work_instr WHERE work_state != '대기' AND work_id = #{work_id}) IS NULL, '대기', '생산중') AS oo_state
		) WHERE oo_id = (SELECT oo_id FROM work_instr WHERE work_id = #{work_id})
	</update>
	<!-- 작업지시 상태가 진행중 또는 완료일 때 수주 테이블의 상태를 자동으로 '생산중'으로 변경 -->
	
	
	<!-- 작업지시의 상태가 '완료'일 경우 품질검사 자동 등록 -->
	<insert id="addQC" parameterType="WijoinVO">
		<selectKey keyProperty="qc_id,qc_num" resultType="WijoinVO" order="BEFORE">
			SELECT ifnull(MAX(qc_id), 0) + 1 AS qc_id, concat('QC', lpad(ifnull(max(qc_id), 0) + 1, 4, 0)) AS qc_num 
			FROM quality_checking
		</selectKey>
		INSERT INTO quality_checking (qc_id, qc_num, work_id, pro_id, line_id, qc_yn, qc_cnt, emp_id, fi_type) 
		SELECT #{qc_id}, #{qc_num}, #{work_id}, #{pro_id}, #{line_id}, '대기', 0, #{emp_id}, '완제품' 
		ON DUPLICATE KEY UPDATE line_id = #{line_id}
	</insert>
	<!-- 작업지시의 상태가 '완료'일 경우 품질검사 자동 등록 -->
	
	
	<!-- 작업지시 삭제 -->
	<delete id="deleteInstr">
		DELETE FROM work_instr WHERE work_id = #{work_id}
	</delete>
	<!-- 작업지시 삭제 -->

</mapper>