<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.modernhome.mapper.WorkPrfrmMapper">
	
	<!-- Join 결과 매핑 RM은 resultMap -->
	<resultMap id="wijoinRM" type="WijoinVO">
		<result property="work_id" column="work_id"/>
		<result property="pro_id" column="pro_id"/>
		<result property="req_id" column="req_id"/>
		<result property="clt_id" column="clt_id"/>
		<result property="oo_id" column="oo_id"/>
		<result property="line_id" column="line_id"/>
		<result property="emp_id" column="emp_id"/>
		<result property="work_num" column="work_num"/>
		<result property="pro_num" column="pro_num"/>
		<result property="ma_num" column="ma_num"/>
		<result property="oo_num" column="oo_num"/>
		<result property="line_num" column="line_num"/>
		<result property="clt_name" column="clt_name"/>
		<result property="pro_name" column="pro_name"/>
		<result property="pro_unit" column="pro_unit"/>
		<result property="emp_name" column="emp_name"/>
		<result property="line_name" column="line_name"/>
		<result property="ma_num" column="ma_num"/>
		<result property="ma_name" column="ma_name"/>
		<result property="oo_cnt" column="oo_cnt"/>
		<result property="req_cnt" column="req_cnt"/>
		<result property="work_cnt" column="work_cnt"/>
		<result property="work_state" column="work_state"/>
		<result property="reg_date" column="reg_date"/>
		<result property="oo_end_date" column="oo_end_date"/>
		<result property="qc_id" column="qc_id"/>
		<result property="qc_num" column="qc_num"/>
		<result property="qc_yn" column="qc_yn"/>
		<result property="qc_cnt" column="qc_cnt"/>
		<result property="qc_date" column="qc_date"/>
		<result property="repaired" column="repaired"/>
		<result property="prfrm_id" column="prfrm_id"/>
		<result property="prfrm_cnt" column="prfrm_cnt"/>
		<result property="ma_id" column="ma_id"/>
		<result property="prfrm_num" column="prfrm_num"/>
	</resultMap>
	<!-- Join 결과 매핑 -->
	
	
	<!-- 작업지시 목록 중 품질검사가 완료인 목록만 출력 -->
	<select id="getqcEndInstr" resultMap="wijoinRM">
		SELECT qc.qc_id, wi.work_id, work_num, wi.line_id, line_num, wi.pro_id, pro_num, pro_name, oo_num, 
			oo_end_date, wi.reg_date, wi.update_date, work_cnt, work_state, wi.emp_id, wi.update_emp_id, 
			CASE 
			WHEN wi.update_emp_id IS NULL THEN
			(SELECT emp_name FROM employee WHERE emp_id = wi.emp_id)
			ELSE
			(SELECT emp_name FROM employee WHERE emp_id = wi.update_emp_id)
        	END AS emp_name 
		FROM work_instr wi 
		LEFT JOIN line li ON li.line_id = wi.line_id 
		LEFT JOIN product pro ON pro.pro_id = wi.pro_id 
		LEFT JOIN quality_checking qc ON qc.work_id = wi.work_id 
		LEFT JOIN out_order oo ON oo.oo_id = wi.oo_id 
		LEFT JOIN work_prfrm wp ON wp.work_id = wi.work_id 
		WHERE qc_yn = '완료' AND wp.work_id IS NULL
	</select>
	<!-- 작업지시 목록 중 품질검사가 완료인 목록만 출력 -->
	
	
	<!-- 전체 글 수 계산 (페이징 처리) -->
	<select id="wpTotalCnt" resultType="int">
		SELECT count(*) FROM work_prfrm
	</select>
	<!-- 전체 글 수 계산 (페이징 처리) -->
	
	
	<!-- 생산실적 목록 출력 (페이징 처리) -->
	<select id="getPrfrmList" resultMap="wijoinRM">
		SELECT wp.prfrm_id, prfrm_num, wp.work_id, wp.qc_id, work_num, wp.line_id, line_num, wp.pro_id, pro_num, pro_name, wp.reg_date, wp.update_date, gb_yn, prfrm_cnt, work_cnt, 
			wp.emp_id, wp.update_emp_id, 
			CASE 
			WHEN wp.update_emp_id IS NULL THEN
			(SELECT emp_name FROM employee WHERE emp_id = wp.emp_id)
			ELSE
			(SELECT emp_name FROM employee WHERE emp_id = wp.update_emp_id)
        	END AS emp_name 
		FROM work_prfrm wp 
		LEFT JOIN work_instr wi ON wp.work_id = wi.work_id 
		LEFT JOIN line li ON wp.line_id = li.line_id 
		LEFT JOIN product pro ON wp.pro_id = pro.pro_id 
		LEFT JOIN employee emp ON wp.emp_id = emp.emp_id
		ORDER BY wi.work_id LIMIT #{pageVO.startPage}, #{pageVO.pageSize}
	</select>
	<!-- 생산실적 목록 출력 (페이징 처리) -->
	
	
	<!-- 검색한 생산실적 개수 (페이징 처리) -->
	<select id="wpSearchCnt" resultType="int">
		SELECT count(wp.prfrm_id) 
		FROM work_prfrm wp 
		LEFT JOIN work_instr wi ON wp.work_id = wi.work_id 
		LEFT JOIN line li ON wp.line_id = li.line_id 
		LEFT JOIN product pro ON wp.pro_id = pro.pro_id 
		LEFT JOIN employee emp ON wp.emp_id = emp.emp_id
		<where>
			<if test="gb_yn != ''">
				gb_yn = #{gb_yn}
			</if>
			<if test="work_num != ''">
				AND wp.work_id = (SELECT wi.work_id FROM work_instr wi WHERE wi.work_num like CONCAT('%', #{work_num}, '%'))
			</if>
			<if test="startDate != ''">
	        	AND IFNULL(wp.update_date, .reg_date) &gt;= #{startDate}
	        </if>
	        <if test="endDate != ''">
	        	AND #{endDate} &gt;= DATE(IFNULL(wp.update_date, .reg_date))
	        </if>
		</where>
	</select>
	<!-- 검색한 생산실적 개수 (페이징 처리) -->
	
	
	<!-- 생산실적 검색 출력 (페이징 처리) -->
	<select id="listSearch" resultMap="wijoinRM">
		SELECT wp.prfrm_id, prfrm_num, wp.work_id, wp.qc_id, work_num, wp.line_id, line_num, wp.pro_id, pro_num, pro_name, wp.reg_date, wp.update_date, gb_yn, prfrm_cnt, work_cnt, 
			wp.emp_id, wp.update_emp_id, 
			CASE 
			WHEN wp.update_emp_id IS NULL THEN
			(SELECT emp_name FROM employee WHERE emp_id = wp.emp_id)
			ELSE
			(SELECT emp_name FROM employee WHERE emp_id = wp.update_emp_id)
        	END AS emp_name
		FROM work_prfrm wp 
		LEFT JOIN work_instr wi ON wp.work_id = wi.work_id 
		LEFT JOIN line li ON wp.line_id = li.line_id 
		LEFT JOIN product pro ON wp.pro_id = pro.pro_id 
		LEFT JOIN employee emp ON wp.emp_id = emp.emp_id
		<where>
			<if test="gb_yn != ''">
				gb_yn = #{gb_yn}
			</if>
			<if test="work_num != ''">
				AND wi.work_num like CONCAT('%', #{work_num}, '%')
			</if>
			<if test="startDate != ''">
	        	AND IFNULL(wp.update_date, .reg_date) &gt;= #{startDate}
	        </if>
	        <if test="endDate != ''">
	        	AND #{endDate} &gt;= DATE(IFNULL(wp.update_date, .reg_date))
	        </if>
		</where>
		ORDER BY wi.work_id LIMIT #{pageVO.startPage}, #{pageVO.pageSize}
	</select>
	<!-- 생산실적 검색 출력 (페이징 처리) -->
	
	
	<!-- 생산실적번호 자동 생성 -->
	<select id="createPrfrmNum" resultType="string">
		SELECT concat('WP', lpad(ifnull(max(prfrm_id), 0) + 1, 4, 0)) AS prfrm_num FROM work_prfrm
	</select>
	<!-- 생산실적번호 자동 생성 -->
	
	
	<!-- 생산실적 추가 저장 -->
	<insert id="addPrfrm" parameterType="WijoinVO">
		<selectKey keyProperty="prfrm_id,work_id,qc_id,line_id,pro_id" resultType="WijoinVO" order="BEFORE">
			SELECT wi.work_id, wi.work_num, wi.line_id, wi.pro_id, 
				qc.qc_id, (SELECT ifnull(max(prfrm_id), 0) + 1 AS prfrm_id FROM work_prfrm) AS prfrm_id 
			FROM work_instr wi 
			LEFT JOIN work_prfrm wp ON wi.work_id = wp.work_id 
			LEFT JOIN quality_checking qc ON qc.work_id = wi.work_id 
			WHERE wi.work_num = #{work_num}
		</selectKey>
		
		INSERT INTO work_prfrm (prfrm_id, prfrm_num, work_id, qc_id, line_id, pro_id, gb_yn, prfrm_cnt, emp_id) 
		VALUES (#{prfrm_id}, #{prfrm_num}, #{work_id}, #{qc_id}, #{line_id}, #{pro_id}, #{gb_yn}, #{prfrm_cnt}, #{emp_id})
	</insert>
	<!-- 생산실적 추가 저장 -->
	
	
	<!-- 생산실적 수정 저장 -->
	<update id="modifyPrfrm" parameterType="WijoinVO">
		UPDATE work_prfrm SET gb_yn = #{gb_yn}, prfrm_cnt = #{prfrm_cnt}, 
			update_date = now(), update_emp_id = #{emp_id} 
		WHERE prfrm_id = #{prfrm_id}
	</update>
	<!-- 생산실적 수정 저장 -->
	
	
	<!-- 생산실적 삭제 -->
	<delete id="deletePrfrm">
		DELETE FROM work_prfrm WHERE prfrm_id = #{prfrm_id}
	</delete>
	<!-- 생산실적 삭제 -->
	
	
	<!-- 생산실적 등록 시, 양품 개수 완제품 재고에 추가 -->
	<update id="addPS" parameterType="WijoinVO">
		UPDATE product_stock SET ps_cnt = ps_cnt + #{prfrm_cnt}, ps_update_date = now(), update_emp_id = #{emp_id} 
		WHERE pro_id = (SELECT pro_id FROM work_prfrm wp WHERE prfrm_id = #{prfrm_id})
	</update>
	<!-- 생산실적 등록 시, 양품 개수 완제품 재고에 추가 -->

</mapper>