<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

	<mapper namespace="com.modernhome.mapper.QualityMapper">

	<!-- Join 결과 매핑 RM은 resultMap -->
	<resultMap id="wijoinRM" type="WijoinVO">
		<result property="work_id" column="work_id"/>
		<result property="pro_id" column="pro_id"/>
		<result property="req_id" column="req_id"/>
		<result property="clt_id" column="clt_id"/>
		<result property="oo_id" column="oo_id"/>
		<result property="line_id" column="line_id"/>
		<result property="emp_id" column="emp_id"/>
		<result property="update_emp_id" column="update_emp_id"/>
		<result property="work_num" column="work_num"/>
		<result property="pro_num" column="pro_num"/>
		<result property="ma_num" column="ma_num"/>
		<result property="oo_num" column="oo_num"/>
		<result property="line_num" column="line_num"/>
		<result property="clt_name" column="clt_name"/>
		<result property="pro_name" column="pro_name"/>
		<result property="pro_unit" column="pro_unit"/>
		<result property="emp_name" column="emp_name"/>
		<result property="line_name" column="line_name"/>
		<result property="ma_num" column="ma_num"/>
		<result property="ma_name" column="ma_name"/>
		<result property="oo_cnt" column="oo_cnt"/>
		<result property="req_cnt" column="req_cnt"/>
		<result property="work_cnt" column="work_cnt"/>
		<result property="work_state" column="work_state"/>
		<result property="reg_date" column="reg_date"/>
		<result property="oo_end_date" column="oo_end_date"/>
		<result property="qc_id" column="qc_id"/>
		<result property="qc_num" column="qc_num"/>
		<result property="qc_yn" column="qc_yn"/>
		<result property="qc_cnt" column="qc_cnt"/>
		<result property="qc_date" column="qc_date"/>
		<result property="repaired" column="repaired"/>
		<result property="prfrm_id" column="prfrm_id"/>
		<result property="prfrm_num" column="prfrm_num"/>
		<result property="ma_id" column="ma_id"/>
		<result property="io_id" column="io_id"/>
		<result property="rec_id" column="rec_id"/>
		<result property="df_cnt" column="df_cnt"/>
		<result property="shp_id" column="shp_id"/>
		<result property="shp_num" column="shp_num"/>
		<result property="shp_cnt" column="shp_cnt"/>
		<result property="fi_type" column="fi_type"/>
	</resultMap>
	<!-- Join 결과 매핑 -->
	
	<!-- 품질검사(완제품) 목록 조회 -->
	<select id="getQualityList" resultMap="wijoinRM">
		SELECT qc.qc_id, wi.work_num, qc.qc_num, l.line_num, l.line_name, p.pro_num, p.pro_name, qc.emp_id, qc.update_emp_id, qc.qc_date, qc.update_date, qc.df_cnt, qc.qc_cnt, wi.work_cnt, qc.qc_yn,
	    CASE
			WHEN qc.update_emp_id IS NULL THEN
				(SELECT emp_name FROM employee WHERE emp_id = qc.emp_id)
			ELSE
				(SELECT emp_name FROM employee WHERE emp_id = qc.update_emp_id)
		END AS emp_name
	    FROM quality_checking qc
	    LEFT JOIN work_instr wi ON qc.work_id = wi.work_id 
	    LEFT JOIN line l ON qc.line_id = l.line_id 
	    LEFT JOIN product p ON qc.pro_id = p.pro_id 
	    LEFT JOIN employee e ON qc.emp_id = e.emp_id
	    WHERE wi.work_id IS NOT NULL
	    ORDER BY qc_id DESC
	    LIMIT #{startPage}, #{pageSize}
	</select>
	<!-- 품질검사(완제품) 목록 조회 -->
	
	<!-- 품질검사(완제품) 검색 -->
	<select id="getQualitySearch" resultMap="wijoinRM">
		SELECT qc.qc_id, wi.work_num, qc.qc_num, l.line_num, l.line_name, p.pro_num, p.pro_name, qc.emp_id, qc.update_emp_id, qc.qc_date, qc.update_date, qc.df_cnt, qc.qc_cnt, wi.work_cnt, qc.qc_yn,
	    CASE
			WHEN qc.update_emp_id IS NULL THEN
				(SELECT emp_name FROM employee WHERE emp_id = qc.emp_id)
			ELSE
				(SELECT emp_name FROM employee WHERE emp_id = qc.update_emp_id)
		END AS emp_name
	    FROM quality_checking qc
	    LEFT JOIN work_instr wi ON qc.work_id = wi.work_id 
	    LEFT JOIN line l ON qc.line_id = l.line_id 
	    LEFT JOIN product p ON qc.pro_id = p.pro_id 
	    LEFT JOIN employee e ON qc.emp_id = e.emp_id
		<where>
			wi.work_id IS NOT NULL
			<if test="qc_num != ''">
				AND qc_num like CONCAT('%', #{qc_num}, '%')
			</if>
			<if test="startDate != ''">
				AND qc.qc_date &gt;= #{startDate}
			</if>
			<if test="endDate != ''">
				AND #{endDate} &gt;= DATE(qc.qc_date) 
			</if>
			<if test="qc_yn != '전체'">
				AND qc_yn = #{qc_yn}
			</if>
		</where>
		ORDER BY qc_id DESC
		LIMIT #{pageVO.startPage}, #{pageVO.pageSize}
	</select>
	
	<!-- 품질검사(완제품) 검색 -->
	
	<!-- 품질검사(완제품) 수정 -->
	<update id="updateQuality">
		UPDATE quality_checking 
		SET update_emp_id = #{update_emp_id}, qc_cnt = #{qc_cnt}, update_date = now(), qc_yn = #{qc_yn}, df_cnt = #{df_cnt}
		WHERE qc_num = #{qc_num}
	</update>
	<!-- 품질검사(완제품) 수정 -->
	
	
	<!-- 전체 글 수 계산 -->
	<select id="getTotalCntQc" resultType="int">
		SELECT count(qc.qc_id)
		FROM quality_checking qc
		LEFT JOIN work_instr wi ON qc.work_id = wi.work_id 
	    LEFT JOIN line l ON qc.line_id = l.line_id 
	    LEFT JOIN product p ON qc.pro_id = p.pro_id 
	    LEFT JOIN employee e ON qc.emp_id = e.emp_id
	   	WHERE wi.work_id IS NOT NULL
	</select>
	<!-- 전체 글 수 계산 -->
	
	<!-- 검색 결과 개수 계산 -->
	<select id="getQualitySearchCnt" resultType="int">
		SELECT count(qc.qc_id)
		FROM quality_checking qc
	    LEFT JOIN work_instr wi ON qc.work_id = wi.work_id 
	    LEFT JOIN line l ON qc.line_id = l.line_id 
	    LEFT JOIN product p ON qc.pro_id = p.pro_id 
	    LEFT JOIN employee e ON qc.emp_id = e.emp_id
		<where>
			wi.work_id IS NOT NULL
			<if test="qc_num != ''">
				AND qc_num like CONCAT('%', #{qc_num}, '%')
			</if>
			<if test="startDate != ''">
				AND qc.qc_date &gt;= #{startDate}
			</if>
			<if test="endDate != ''">
				AND #{endDate} &gt;= DATE(qc.qc_date) 
			</if>
			<if test="qc_yn != '전체'">
				AND qc_yn = #{qc_yn}
			</if>
		</where>
	</select>	
	<!-- 검색 결과 개수 계산 -->
	
	
	<!-- 품질검사(자재) 목록 조회 -->
	<select id="getMaterialQualityList" resultMap="wijoinRM">
		SELECT qc.qc_id, rec.rec_num, qc.qc_num, ma.ma_num , ma.ma_name , qc.emp_id, qc.update_emp_id, qc.qc_date, qc.update_date, qc.df_cnt, qc.qc_cnt, rec.rec_cnt, qc.qc_yn,
		CASE
			WHEN qc.update_emp_id IS NULL THEN
				(SELECT emp_name FROM employee WHERE emp_id = qc.emp_id)
			ELSE
				(SELECT emp_name FROM employee WHERE emp_id = qc.update_emp_id)
		END AS emp_name
		FROM quality_checking qc
		LEFT JOIN employee e ON qc.emp_id = e.emp_id 
		LEFT JOIN receive rec ON qc.rec_id = rec.rec_id
		LEFT JOIN material ma ON qc.ma_id = ma.ma_id
		WHERE rec.rec_id IS NOT NULL
		ORDER BY qc_id DESC
		LIMIT #{startPage}, #{pageSize}
	</select>
	<!-- 품질검사(자재) 목록 조회 -->
	
	<!-- 품질검사(자재) 검색 -->
	<select id="getMaterialQualitySearch" resultMap="wijoinRM">
		SELECT qc.qc_id, rec.rec_num, qc.qc_num, ma.ma_num , ma.ma_name , qc.emp_id, qc.update_emp_id, qc.qc_date, qc.update_date, qc.df_cnt, qc.qc_cnt, rec.rec_cnt, qc.qc_yn,
		CASE
			WHEN qc.update_emp_id IS NULL THEN
				(SELECT emp_name FROM employee WHERE emp_id = qc.emp_id)
			ELSE
				(SELECT emp_name FROM employee WHERE emp_id = qc.update_emp_id)
		END AS emp_name
		FROM quality_checking qc
		LEFT JOIN employee e ON qc.emp_id = e.emp_id 
		LEFT JOIN receive rec ON qc.rec_id = rec.rec_id
		LEFT JOIN material ma ON qc.ma_id = ma.ma_id
		<where>
			rec.rec_id IS NOT NULL
			<if test="qc_num != ''">
				AND qc_num like CONCAT('%', #{qc_num}, '%')
			</if>
			<if test="startDate != ''">
				AND qc.qc_date &gt;= #{startDate}
			</if>
			<if test="endDate != ''">
				AND #{endDate} &gt;= DATE(qc.qc_date) 
			</if>
			<if test="qc_yn != '전체'">
				AND qc_yn = #{qc_yn}
			</if>
		</where>
		ORDER BY qc_id DESC
		LIMIT #{pageVO.startPage}, #{pageVO.pageSize}
	</select>
	
	<!-- 품질검사(자재) 검색 -->
	
	<!-- 품질검사(자재) 수정 -->
	<update id="updateMaterialQuality">
		UPDATE quality_checking 
		SET update_emp_id = #{update_emp_id}, qc_cnt = #{qc_cnt}, update_date = now(), qc_yn = #{qc_yn}, df_cnt = #{df_cnt}
		WHERE qc_num = #{qc_num}
	</update>
	<!-- 품질검사(자재) 수정 -->
	
	<!-- 전체 글 수 계산(자재) -->
	<select id="getTotalCntMqc" resultType="int">
		SELECT count(qc.qc_id)
		FROM quality_checking qc
		LEFT JOIN employee e ON qc.emp_id = e.emp_id 
		LEFT JOIN receive rec ON qc.rec_id = rec.rec_id
		LEFT JOIN material ma ON qc.ma_id = ma.ma_id
		WHERE rec.rec_id IS NOT NULL
	</select>
	<!-- 전체 글 수 계산(자재) -->
	
	<!-- 검색 결과 개수 계산(자재) -->
	<select id="getMateriqlQualitySearchCnt" resultType="int">
		SELECT count(qc.qc_id)
		FROM quality_checking qc
		LEFT JOIN employee e ON qc.emp_id = e.emp_id 
		LEFT JOIN receive rec ON qc.rec_id = rec.rec_id
		LEFT JOIN material ma ON qc.ma_id = ma.ma_id
		<where>
		 	rec.rec_id IS NOT NULL
			<if test="qc_num != ''">
				AND qc_num like CONCAT('%', #{qc_num}, '%')
			</if>
			<if test="startDate != ''">
				AND qc.qc_date &gt;= #{startDate}
			</if>
			<if test="endDate != ''">
				AND #{endDate} &gt;= DATE(qc.qc_date) 
			</if>
			<if test="qc_yn != '전체'">
				AND qc_yn = #{qc_yn}
			</if>
		</where>
		ORDER BY qc_id DESC
	</select>
	<!-- 검색 결과 개수 계산(자재) -->
	
	
	<!-- 입고테이블에서 입고 대기일 경우 qc 테이블에 추가 -->
	<insert id="addQC" parameterType="WijoinVO">
        <selectKey keyProperty="qc_id,qc_num" resultType="WijoinVO" order="BEFORE">
            SELECT ifnull(MAX(qc_id), 0) + 1 AS qc_id, concat('QC', lpad(ifnull(max(qc_id), 0) + 1, 4, 0)) AS qc_num 
            FROM quality_checking
        </selectKey>
			INSERT INTO quality_checking (qc_id, qc_num, rec_id, ma_id, qc_yn, qc_cnt, emp_id, fi_type) 
	        SELECT #{qc_id}, #{qc_num}, #{rec_id}, #{ma_id}, '대기', 0, #{emp_id}, '자재'
	</insert>
	<!-- 입고테이블에서 입고 대기일 경우 qc 테이블에 추가 -->
	
		
	<!-- 출고 테이블에서 상태가 '출고대기'인 목록 출력 -->
	<select id="getMrList" resultMap="wijoinRM">
		SELECT qc.qc_id, qc_num, mr.mr_id, mr_num, mr.ma_id, ma_num, ma_name, mr_cnt, mr_state, pr.pr_id, pr_num, pr.pro_id, pro_num, pro_name, pr_cnt, pr_state, 
			wh_name, fi_type, qc_date, qc.update_date, qc.emp_id, qc.update_emp_id, qc.qc_yn, qc.qc_cnt, qc.df_cnt,
			CASE
		    WHEN qc.update_emp_id IS NULL THEN
		        (SELECT emp_name FROM employee WHERE emp_id = qc.emp_id)
		    ELSE
		        (SELECT emp_name FROM employee WHERE emp_id = qc.update_emp_id)
			END AS emp_name
		FROM quality_checking qc 
		LEFT JOIN product_release pr ON qc.pr_id = pr.pr_id 
		LEFT JOIN product pro ON pr.pro_id = pro.pro_id 
		LEFT JOIN material_release mr ON qc.mr_id = mr.mr_id 
		LEFT JOIN material ma ON mr.ma_id = ma.ma_id 
		LEFT JOIN warehouse wh ON pr.wh_id = wh.wh_id OR mr.wh_id = wh.wh_id
		LEFT JOIN employee emp ON qc.emp_id = emp.emp_id
		WHERE qc.mr_id IS NOT NULL OR qc.pr_id IS NOT NULL
		ORDER BY qc_id DESC
		LIMIT #{startPage}, #{pageSize}
	</select>
	<!-- 출고 테이블에서 상태가 '출고대기'인 목록 출력 -->
	
	<!-- 출고 테이블에서 상태가 '출고대기'인 목록 검색 -->
	<select id="getMrListSearch" resultMap="wijoinRM">
		SELECT qc.qc_id, qc_num, mr.mr_id, mr_num, mr.ma_id, ma_num, ma_name, mr_cnt, mr_state, pr.pr_id, pr_num, pr.pro_id, pro_num, pro_name, pr_cnt, pr_state, 
			wh_name, fi_type, qc_date, qc.update_date, qc.emp_id, qc.update_emp_id, qc.qc_yn, qc.qc_cnt, qc.df_cnt,
			CASE
		    WHEN qc.update_emp_id IS NULL THEN
		        (SELECT emp_name FROM employee WHERE emp_id = qc.emp_id)
		    ELSE
		        (SELECT emp_name FROM employee WHERE emp_id = qc.update_emp_id)
			END AS emp_name
		FROM quality_checking qc 
		LEFT JOIN product_release pr ON qc.pr_id = pr.pr_id 
		LEFT JOIN product pro ON pr.pro_id = pro.pro_id 
		LEFT JOIN material_release mr ON qc.mr_id = mr.mr_id 
		LEFT JOIN material ma ON mr.ma_id = ma.ma_id 
		LEFT JOIN warehouse wh ON pr.wh_id = wh.wh_id OR mr.wh_id = wh.wh_id
		LEFT JOIN employee emp ON qc.emp_id = emp.emp_id
		<where>
			(qc.mr_id IS NOT NULL OR qc.pr_id IS NOT NULL)
			<if test="qc_num != ''">
				AND qc_num like CONCAT('%', #{qc_num}, '%')
			</if>
			<if test="startDate != ''">
				AND qc.qc_date &gt;= #{startDate}
			</if>
			<if test="endDate != ''">
				AND #{endDate} &gt;= DATE(qc.qc_date) 
			</if>
			<if test="qc_yn != '전체'">
				AND qc_yn = #{qc_yn}
			</if>
		</where> 
		ORDER BY qc_id DESC
		LIMIT #{pageVO.startPage}, #{pageVO.pageSize}
	</select>
	<!-- 출고 테이블에서 상태가 '출고대기'인 목록 검색 -->
	
	<select id="getTotalCntFi" resultType="int">
		SELECT count(qc.qc_id)
		FROM quality_checking qc
		LEFT JOIN product_release pr ON qc.pr_id = pr.pr_id 
		LEFT JOIN product pro ON pr.pro_id = pro.pro_id 
		LEFT JOIN material_release mr ON qc.mr_id = mr.mr_id 
		LEFT JOIN material ma ON mr.ma_id = ma.ma_id 
		LEFT JOIN warehouse wh ON pr.wh_id = wh.wh_id OR mr.wh_id = wh.wh_id
		LEFT JOIN employee emp ON qc.emp_id = emp.emp_id
		WHERE qc.mr_id IS NOT NULL OR qc.pr_id IS NOT NULL
	</select>
	
	<select id="getMrListSearchCnt" resultType="int">
		SELECT count(qc.qc_id)
		FROM quality_checking qc
		LEFT JOIN product_release pr ON qc.pr_id = pr.pr_id 
		LEFT JOIN product pro ON pr.pro_id = pro.pro_id 
		LEFT JOIN material_release mr ON qc.mr_id = mr.mr_id 
		LEFT JOIN material ma ON mr.ma_id = ma.ma_id 
		LEFT JOIN warehouse wh ON pr.wh_id = wh.wh_id OR mr.wh_id = wh.wh_id
		LEFT JOIN employee emp ON qc.emp_id = emp.emp_id
		<where>
			(qc.mr_id IS NOT NULL OR qc.pr_id IS NOT NULL)
			<if test="qc_num != ''">
				AND qc_num like CONCAT('%', #{qc_num}, '%')
			</if>
			<if test="qc_yn != '전체'">
				AND qc_yn = #{qc_yn}
			</if>
			<if test="startDate != ''">
				AND qc.qc_date &gt;= #{startDate}
			</if>
			<if test="endDate != ''">
				AND #{endDate} &gt;= DATE(qc.qc_date) 
			</if>
		</where> 
	</select>
	
	<!-- 출고검사 수정 -->
	<update id="updateFactoryInspection">
		UPDATE quality_checking 
		SET update_emp_id = #{update_emp_id}, qc_cnt = #{qc_cnt}, update_date = now(), qc_yn = #{qc_yn}, df_cnt = #{df_cnt} 
		WHERE qc_num = #{qc_num}
	</update>
	<!-- 출고검사 수정 -->
	
	<!-- 출고 테이블(자재)에서 출고대기일 경우 qc 테이블에 추가 -->
	<insert id="addMrQC" parameterType="WijoinVO">
        <selectKey keyProperty="qc_id,qc_num" resultType="WijoinVO" order="BEFORE">
            SELECT ifnull(MAX(qc_id), 0) + 1 AS qc_id, concat('QC', lpad(ifnull(max(qc_id), 0) + 1, 4, 0)) AS qc_num 
            FROM quality_checking
        </selectKey>
			INSERT INTO quality_checking (qc_id, qc_num, mr_id, ma_id, qc_yn, qc_cnt, emp_id, fi_type) 
	        VALUES (#{qc_id}, #{qc_num}, #{mr_id}, #{ma_id}, '대기', 0, #{emp_id}, '자재')
	</insert>
	<!-- 출고 테이블(자재)에서 출고대기일 경우 qc 테이블에 추가 -->
	
	<!-- 출고 테이블(완제품)에서 출고대기일 경우 qc 테이블에 추가 -->
	<insert id="addPrQC" parameterType="WijoinVO">
        <selectKey keyProperty="qc_id,qc_num" resultType="WijoinVO" order="BEFORE">
            SELECT ifnull(MAX(qc_id), 0) + 1 AS qc_id, concat('QC', lpad(ifnull(max(qc_id), 0) + 1, 4, 0)) AS qc_num 
            FROM quality_checking
        </selectKey>
			INSERT INTO quality_checking (qc_id, qc_num, pr_id, pro_id, qc_yn, qc_cnt, emp_id, fi_type) 
	        VALUES (#{qc_id}, #{qc_num}, #{pr_id}, #{pro_id}, '대기', 0, #{emp_id}, '완제품')
	</insert>
	<!-- 출고 테이블(완제품)에서 출고대기일 경우 qc 테이블에 추가 -->
	
	<!-- 수입검사에서 검사완료가되면 자재 입고 관리페이지에 검사완료로 변경 -->
	<update id="modifyRecState" parameterType="WijoinVO">
		UPDATE receive SET rec_in_state = '검사완료',rec_cnt = rec_cnt - #{df_cnt}
		WHERE rec_id = (SELECT rec_id FROM quality_checking WHERE qc_num = #{qc_num})
	</update>
	<!-- 수입검사에서 검사완료가되면 자재 입고 관리페이지에 검사완료로 변경 -->
	
	<!-- 출고검사에서 자재가 검사완료가 되면 자채 출고페이지에 출고완료로 변경 -->
	<update id="modifyRel" parameterType="WijoinVO">
		UPDATE material_release SET mr_state = '검사완료',mr_cnt = mr_cnt - #{df_cnt}
		WHERE mr_id = (SELECT mr_id FROM quality_checking WHERE qc_num = #{qc_num})
	</update>
	<!-- 출고검사에서 자재가 검사완료가 되면 자채 출고 페이지에 출고완료로 변경 -->
	
	<!-- 출고검사에서 완제품이 검사완료가 되면 완제품 출고페이지에 출고완료로 변경 -->
	<update id="modifyPro" parameterType="WijoinVO">
		UPDATE product_release SET pr_state = '검사완료',pr_cnt = pr_cnt - #{df_cnt}
		WHERE pr_id = (SELECT pr_id FROM quality_checking WHERE qc_num = #{qc_num})
	</update>
	<!-- 출고검사에서 완제품이 검사완료가 되면 완제품 출고펭지에 출고완료로 변경 -->
	
	
	
	
	<!-- 불량률 계산 -->
	<select id="dfRate" resultType="com.modernhome.domain.QualityCheckingVO">
		SELECT
			DATE_FORMAT(qc_date, '%Y-%m') AS qc_date,
			sum(qc_cnt) qc_cnt, sum(df_cnt) df_cnt
		FROM quality_checking
		WHERE work_id IS NOT NULL AND pro_id IS NOT NULL AND qc_yn = '완료'
		GROUP BY DATE_FORMAT(qc_date, '%Y-%m')
		ORDER BY qc_date
	</select>
	<!-- 불량률 계산 -->
	
	
</mapper>